generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Vendor {
  id             Int                    @id @default(autoincrement())
  firstName      String                 @db.VarChar(15)
  lastName       String                 @db.VarChar(15)
  password       String
  email          String                 @unique @db.VarChar(50)
  verified       Boolean?               @default(false)
  active         Boolean                @default(false)
  isOauth        Boolean                @default(false)
  oAuthDetails   String?
  phoneNumber    String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  profilePicture VendorProfilePicture[]
  storeDetails   StoreDetails[]
}

model VendorProfilePicture {
  id        Int      @id @default(autoincrement())
  mimeType  String
  picture   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId  Int      @unique
}

model StoreDetails {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  address           String
  city              String
  description       String
  tagLine           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  vendor            Vendor              @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId          Int                 @unique
  storeLogo         StoreLogo[]
  firstStoreBanner  FirstStoreBanner[]
  secondStoreBanner SecondStoreBanner[]
}

model StoreLogo {
  id        Int          @id @default(autoincrement())
  mimeType  String
  picture   String       @db.LongText
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  store     StoreDetails @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   Int          @unique
}

model FirstStoreBanner {
  id        Int          @id @default(autoincrement())
  mimeType  String
  picture   String       @db.LongText
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  store     StoreDetails @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   Int          @unique
}

model SecondStoreBanner {
  id        Int          @id @default(autoincrement())
  mimeType  String?
  picture   String?      @db.LongText
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  store     StoreDetails @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   Int          @unique
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  CONTENT_ADMIN
  MANAGER
  VENDOR
  USER
  MODERATOR
  SUPPORT_ADMIN
  FINANCE_ADMIN
  HR_ADMIN
  IT_ADMIN
  COMPLIANCE_ADMIN
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String
  level          Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  RolePermission RolePermission[]
  Admin          Admin[]
}

model Permission {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  RolePermission  RolePermission[]
  adminPermission AdminPermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId]) // Prevent duplicate role-permission pairs
}

model Admin {
  id                Int                   @id @default(autoincrement())
  firstName         String                @db.VarChar(15)
  lastName          String                @db.VarChar(15)
  password          String
  email             String                @unique @db.VarChar(50)
  phoneNumber       String?
  active            Boolean               @default(false)
  roleId            Int?
  role              Role?                 @relation(fields: [roleId], references: [id])
  createdBy         String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  profilePicture    AdminProfilePicture[]
  directPermissions AdminPermission[]
  Category          Category[]
}

model AdminProfilePicture {
  id        Int      @id @default(autoincrement())
  mimeType  String
  picture   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId   Int      @unique
}

model AdminPermission {
  id           Int        @id @default(autoincrement())
  adminId      Int
  permissionId Int
  admin        Admin      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([adminId, permissionId]) // Prevent duplicate admin-permission pairs
}

model Customer {
  id                 Int                  @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String               @unique
  password           String
  phoneNumber        String
  verified           Boolean              @default(false)
  active             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Address            CustomerAddress[]
  CustomerProfilePic CustomerProfilePic[]
}

model CustomerAddress {
  id         Int      @id @default(autoincrement())
  street     String
  city       String
  zip        String
  customerId Int      @unique
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CustomerProfilePic {
  id         Int      @id @default(autoincrement())
  mimeType   String
  picture    String   @db.LongText
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int      @unique
}

model Category {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  priority      Int
  active        Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  adminId       Int?
  admin         Admin?          @relation(fields: [adminId], references: [id], onDelete: SetNull)
  SubCategory   SubCategory[]
  CategoryImage CategoryImage[]
}

model SubCategory {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  priority         Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  categoryId       Int
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  SubSubCategory   SubSubCategory[]
  SubCategoryImage SubCategoryImage[]
}

model SubSubCategory {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  priority            Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  subCategoryId       Int
  subCategory         SubCategory           @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  SubSubCategoryImage SubSubCategoryImage[]
}

model SubSubCategoryImage {
  id               Int            @id @default(autoincrement())
  mimeType         String
  picture          String         @db.LongText
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  subSubCategory   SubSubCategory @relation(fields: [subSubCategoryId], references: [id], onDelete: Cascade)
  subSubCategoryId Int            @unique
}

model SubCategoryImage {
  id            Int         @id @default(autoincrement())
  mimeType      String
  picture       String      @db.LongText
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  subCategoryId Int         @unique
}

model CategoryImage {
  id         Int      @id @default(autoincrement())
  mimeType   String
  picture    String   @db.LongText
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int      @unique
}

model Brand {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  BrandImage BrandImage[]
}

model BrandImage {
  id        Int      @id @default(autoincrement())
  mimeType  String
  picture   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId   Int      @unique
}
