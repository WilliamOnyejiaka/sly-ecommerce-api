generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Vendor {
  id             Int                    @id @default(autoincrement())
  firstName      String                 @db.VarChar(15)
  lastName       String                 @db.VarChar(15)
  password       String
  email          String                 @unique @db.VarChar(50)
  verified       Boolean?               @default(false)
  active         Boolean                @default(false)
  isOauth        Boolean                @default(false)
  oAuthDetails   String?
  phoneNumber    String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  profilePicture VendorProfilePicture[]
  storeDetails   StoreDetails[]
}

model VendorProfilePicture {
  id        Int      @id @default(autoincrement())
  mimeType  String
  picture   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  vendorId  Int      @unique
}

model StoreDetails {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  address           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  vendor            Vendor              @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId          Int                 @unique
  storeLogo         StoreLogo[]
  firstStoreBanner  FirstStoreBanner[]
  secondStoreBanner SecondStoreBanner[]
}

model StoreLogo {
  id        Int          @id @default(autoincrement())
  mimeType  String
  picture   String       @db.LongText
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  store     StoreDetails @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   Int          @unique
}

model FirstStoreBanner {
  id        Int          @id @default(autoincrement())
  mimeType  String
  picture   String       @db.LongText
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  store     StoreDetails @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   Int          @unique
}

model SecondStoreBanner {
  id        Int          @id @default(autoincrement())
  mimeType  String?
  picture   String?      @db.LongText
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  store     StoreDetails @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   Int          @unique
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  CONTENT_ADMIN
  MANAGER
  VENDOR
  USER
  MODERATOR
  SUPPORT_ADMIN
  FINANCE_ADMIN
  HR_ADMIN
  IT_ADMIN
  COMPLIANCE_ADMIN
}

model Admin {
  id             Int                   @id @default(autoincrement())
  firstName      String                @db.VarChar(15)
  lastName       String                @db.VarChar(15)
  password       String
  email          String                @unique @db.VarChar(50)
  phoneNumber    String?
  role           AdminRole             @default(MANAGER)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  profilePicture AdminProfilePicture[]
}

model AdminProfilePicture {
  id        Int      @id @default(autoincrement())
  mimeType  String
  picture   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId   Int      @unique
}
